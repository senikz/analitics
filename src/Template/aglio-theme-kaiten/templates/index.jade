doctype

mixin Badge(method)
    //- Draw a badge for a given HTTP method
    case method
        when 'GET'
            span.badge.get
        when 'HEAD'
            span.badge.head
        when 'OPTIONS'
            span.badge.options
        when 'POST'
            span.badge.post
        when 'PUT'
            span.badge.put
        when 'PATCH'
            span.badge.patch
        when 'DELETE'
            span.badge.delete
        default
            span.badge

mixin Nav()
    //- Draw a navigation bar, which includes links to individual
    //- resources and actions.
    nav
        if self.api.navItems && self.api.navItems.length
            .resource-group
                .heading
                    .chevron
                        i.open.fa.fa-angle-down
                    a(href='#top') Overview
                .collapse-content
                    ul: each item in self.api.navItems
                        li
                            a(href=item[1])!= item[0]
        each resourceGroup in self.api.resourceGroups || []
            .resource-group
                .heading
                    .chevron
                        i.open.fa.fa-angle-down
                    a(href=resourceGroup.elementLink)!= resourceGroup.name || 'Resource Group'
                .collapse-content
                    ul
                        each item in resourceGroup.navItems || []
                            li
                                a(href=item[1])!= item[0]
                        each resource in resourceGroup.resources || []
                            li
                                if !self.condenseNav || (resource.actions.length != 1)
                                    a(href=resource.elementLink)
                                        b!= resource.name || 'Resource'
                                    ul: each action in resource.actions || []
                                        li: a(href=action.elementLink)
                                            +Badge(action.method)
                                            != action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
                                else
                                    - var action = resource.actions[0]
                                    a(href=action.elementLink)
                                        +Badge(action.method)
                                        != action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
        //- Link to the API hostname, e.g. api.yourcompany.com
        each meta in self.api.metadata || {}
            if meta.name == 'HOST'
                p(style="text-align: center; word-wrap: break-word;")
                    a(href=meta.value)= meta.value

mixin Parameters(params)
    //- Draw a definition list of parameter names, types, defaults,
    //- examples and descriptions.
    .title
        strong Parameters
        .collapse-button.show
            i(class="fa fa-arrow-down close")
            i(class="fa fa-arrow-left open")
    .collapse-content
        table.inner: each param in params || []
            tr
                td
                td(class="attribute-status")
                    span(class=param.required ? 'required' : '')
                td #{self.urldec(param.name)}
                td
                    span.attribute-type #{param.type || 'string'}
                    p #{param.description}


mixin Constraints(name, schema)
    each constraint in ['minLength', 'maxLength', 'pattern']
        if schema.properties[name][constraint]
            div #{constraint}: #{schema.properties[name][constraint]}


mixin RequestResponse(title, request, collapse, showSchema)
    .title
        strong
            = title
            if request.name
                | &nbsp;&nbsp;
                code= request.name
        if collapse && request.hasContent
            .collapse-button
                i(class="fa fa-arrow-down close")
                i(class="fa fa-arrow-left open")
    +RequestResponseBody(request, collapse, false, showSchema)

mixin RequestResponseBody(request, collapse, showBlank, showSchema)
    if request.hasContent || showBlank
        div(class=collapse ? 'collapse-content' : ''): .inner
            if request.description
                .description!= self.markdown(request.description)

            if Object.keys(request.headers).length
                h5 Headers
                pre: code
                    each item, index in request.headers
                        != self.highlight(item.name + ': ' + item.value, 'http')
                        if index < request.headers.length - 1
                            br
                div(style="height: 1px;")

            if request.hasContent
                div(class="tabs r-tabs")
                    div.tabs-menu
                        if request.schema 
                            a(data-tab="attributes" class="tab-button active") Attributes
                        if request.body
                            a(data-tab="attributes" class="tab-button") Body
                        if showSchema && request.schema 
                            a(data-tab="attributes" class="tab-button") Schema
                    if request.schema
                        div.tab(data-tab="attributes" class="active")
                            - var schema = JSON.parse(request.schema)
                            table(style="width: 100%;")
                                thead
                                    each description, name in schema.properties || []
                                        tr
                                            td(class="attribute-status")
                                                span(class=(schema.required && schema.required.indexOf(name) >= 0) ? 'required' : '')
                                            td #{name}
                                            td
                                                span.attribute-type #{description.type}
                                                p #{description.description}
                                            td
                                                +Constraints(name, schema) 
                                        if description.type == 'array'
                                            each d2, n2 in description.items.properties || []
                                                tr
                                                    td
                                                    td(class="attribute-status")
                                                        span(class=(schema.required && schema.required.indexOf(n2) >= 0) ? 'required' : '')
                                                    td #{n2}
                                                    td
                                                        span.attribute-type #{d2.type}
                                                        p #{d2.description}
                                                if d2.type == 'array'
                                                    each d3, n3 in d2.items.properties || []
                                                        tr
                                                            td
                                                            td(class="attribute-status")
                                                                span(class=(schema.required && schema.required.indexOf(n3) >= 0) ? 'required' : '')
                                                            td #{n3}
                                                            td
                                                                span.attribute-type #{d3.type}
                                                                p #{d3.description}
                    if request.body
                        div.tab(data-tab="body")
                            pre: code
                                != self.highlight(request.body, null, ['json', 'yaml', 'xml', 'javascript'])
                            div(style="height: 1px;")
                    if showSchema && request.schema 
                        div.tab(data-tab="schema")
                            pre: code
                                != self.highlight(request.schema, null, ['json', 'yaml', 'xml'])

            if !request.hasContent
                .description.text-muted This response has no content.
                div(style="height: 1px;")

mixin Examples(resourceGroup, resource, action)
    each example in action.examples
        each request in example.requests
            +RequestResponse('Request', request, true, true)
        each response in example.responses
            +RequestResponse('Response', response, true, true)

mixin Content()
    //- Page header and API description
    header
        h1#top!= self.api.name || 'API Documentation'

    if self.api.descriptionHtml
        != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        h2.group-heading
            != resourceGroup.name || 'Resource Group'
            = " "
            a.permalink(href=resourceGroup.elementLink) &para;
        if resourceGroup.descriptionHtml
            != resourceGroup.descriptionHtml

        each resource in resourceGroup.resources || []
            .resource(id=resource.elementId)
                h3.resource-heading
                    != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                    = " "
                    a.permalink(href=resource.elementLink) &nbsp;&para;
                if resource.description
                    != self.markdown(resource.description)

                each action in resource.actions || []
                    .action(class=action.methodLower, id=action.elementId)
                        div.action-name!= action.name
                        h4.action-heading
                            a.method(class=action.methodLower, href=action.elementLink)
                                = action.method
                            code.uri= self.urldec(self.api.host + action.uriTemplate)
                        if action.description
                            != self.markdown(action.description)

                        //- A list of sub-sections for parameters, requests
                        //- and responses.
                        if action.parameters.length
                            +Parameters(action.parameters)
                        if action.examples
                            +Examples(resourceGroup, resource, action)

mixin ContentTriple()
    .middle
        //- Page header and API description
        header
            h1#top!= self.api.name || 'API Documentation'

    .right
        h5 API Endpoint
        a(href=self.api.host)= self.api.host
    .middle
        if self.api.descriptionHtml
            != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        .middle
            section.resource-group(id=resourceGroup.elementId)
                h2.group-heading
                    != resourceGroup.name || 'Resource Group'
                    = " "
                    a.permalink(href=resourceGroup.elementLink) &para;
                if resourceGroup.descriptionHtml
                    != resourceGroup.descriptionHtml

        each resource in resourceGroup.resources || []
            .middle
                .resource(id=resource.elementId)
                    h3.resource-heading
                        != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                        = " "
                        a.permalink(href=resource.elementLink) &para;
                    if resource.description
                        != self.markdown(resource.description)

            each action in resource.actions || []
                if action.examples
                    .right
                        .definition
                            span.method(class=action.methodLower)= action.method
                            | &nbsp;
                            span.uri
                                span.hostname= self.api.host
                                != action.colorizedUriTemplate
                        .tabs
                            if action.hasRequest
                                .example-names
                                    span Requests
                                    - var requestCount = 0
                                    each example in action.examples
                                        each request in example.requests
                                            - requestCount++
                                            span.tab-button= request.name || 'example ' + requestCount
                                each example in action.examples
                                    each request in example.requests
                                        .tab
                                            +RequestResponseBody(request, false, true)
                                            .tabs
                                                .example-names
                                                    span Responses
                                                    each response in example.responses
                                                        span.tab-button= response.name
                                                each response in example.responses
                                                    .tab
                                                        +RequestResponseBody(response, false, true)
                            else
                                each example in action.examples
                                    .tabs
                                        .example-names
                                            span Responses
                                            each response in example.responses
                                                span.tab-button= response.name
                                        each response in example.responses
                                            .tab
                                                +RequestResponseBody(response, false, true)
                .middle
                    .action(class=action.methodLower, id=action.elementId)
                        h4.action-heading
                            .name!= action.name
                            a.method(class=action.methodLower, href=action.elementLink)
                                = action.method
                            code.uri= self.urldec(action.uriTemplate)
                        if action.description
                            != self.markdown(action.description)

                        //- A list of sub-sections for parameters, requests
                        //- and responses.
                        if action.parameters.length
                            +Parameters(action.parameters)

                hr.split


html
    head
        meta(charset="utf-8")
        title= self.api.name || 'API Documentation'
        link(rel="stylesheet", href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css")
        style!= self.css
    body.preload
        a.text-muted.back-to-top(href='#top')
            i.fa.fa-toggle-up
            | &nbsp;Back to top
        div(class='container-fluid')
            .row
                block nav
                    +Nav(false)

                .content
                    block content
                        +Content('primary', false)

        p.text-muted(style="text-align: center;")
            | Generated by&nbsp;
            a.aglio(href="https://github.com/danielgtaylor/aglio") aglio
            | &nbsp;on #{self.date().format('DD MMM YYYY')}

        script: include scripts.js

        if self.livePreview
            script(src="/socket.io/socket.io.js")
            script.
                var socket = io();
                socket.on('refresh', refresh);
                socket.on('reconnect', function () {
                    socket.emit('request-refresh');
                });
